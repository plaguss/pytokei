{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pytokei \u00b6 Pytokei is a python binding to tokei , from their repo: Tokei is a program that displays statistics about your code. Tokei will show the number of files, total lines within those files and code, comments, and blanks grouped by language. This wrapper allows to obtain the same reports directly from python. For more information about tokei , please visit its repo . Installation \u00b6 pip install pytokei Requires Python >= 3.7. Binaries are available for: Linux : x86_64 , aarch64 , i686 , armv7l , musl-x86_64 & musl-aarch64 MacOS : x86_64 & arm64 (except python 3.7) Windows : amd64 & win32 Otherwise, you can install from source which requires Rust stable to be installed. To use the CLI, install with the needed dependencies (maybe with pipx ). pipx install pytokei [ cli ] Development \u00b6 You will need: maturin to compile the library maturin develop / make develop to compile the code. From python side: Run make install-dev inside a virtual environment, make test , make mypy and make format to ensure everything is as expected, and make docs to build the documentation. There are some problems when building the docs with mkdocstrings, a reminder is in the following github issue . For the moment, it seems that the best option is to remove the .so file and build the docs without it. Time comparison tokei and pytokei \u00b6 Just to see if the binding makes the code slower, a test was done against the cpython repository. The timing isn't directly comparable, Rust's version prints the average time, while Python's version shows the minimum, but it should be enough to get an idea. A better test should be defined in the future. The python version uses docker . A print like the following should appear: $ sh run_dockerfile_py.sh ... Successfully tagged bench_from_pytokei:latest ================== Timing python run: ------------------ 100 loops, best of 1 : 194 msec per loop ================== The rust version needs rust-script installed. $ sh bench_rs.sh ================ Timing rust run: ---------------- 100 loops, average time was: 0 .17748523967000002 sec ================","title":"Intro"},{"location":"#pytokei","text":"Pytokei is a python binding to tokei , from their repo: Tokei is a program that displays statistics about your code. Tokei will show the number of files, total lines within those files and code, comments, and blanks grouped by language. This wrapper allows to obtain the same reports directly from python. For more information about tokei , please visit its repo .","title":"pytokei"},{"location":"#installation","text":"pip install pytokei Requires Python >= 3.7. Binaries are available for: Linux : x86_64 , aarch64 , i686 , armv7l , musl-x86_64 & musl-aarch64 MacOS : x86_64 & arm64 (except python 3.7) Windows : amd64 & win32 Otherwise, you can install from source which requires Rust stable to be installed. To use the CLI, install with the needed dependencies (maybe with pipx ). pipx install pytokei [ cli ]","title":"Installation"},{"location":"#development","text":"You will need: maturin to compile the library maturin develop / make develop to compile the code. From python side: Run make install-dev inside a virtual environment, make test , make mypy and make format to ensure everything is as expected, and make docs to build the documentation. There are some problems when building the docs with mkdocstrings, a reminder is in the following github issue . For the moment, it seems that the best option is to remove the .so file and build the docs without it.","title":"Development"},{"location":"#time-comparison-tokei-and-pytokei","text":"Just to see if the binding makes the code slower, a test was done against the cpython repository. The timing isn't directly comparable, Rust's version prints the average time, while Python's version shows the minimum, but it should be enough to get an idea. A better test should be defined in the future. The python version uses docker . A print like the following should appear: $ sh run_dockerfile_py.sh ... Successfully tagged bench_from_pytokei:latest ================== Timing python run: ------------------ 100 loops, best of 1 : 194 msec per loop ================== The rust version needs rust-script installed. $ sh bench_rs.sh ================ Timing rust run: ---------------- 100 loops, average time was: 0 .17748523967000002 sec ================","title":"Time comparison tokei and pytokei"},{"location":"cli/","text":"Command Line Interface \u00b6 pytokei can be used from the console (at least for a subset of the options that tokei offers). The CLI is built using typer and rich , so it should be self explanatory: Only the compact report has been implemented: With options to sort by the different variables, and ignore paths: For the full detailed CLI you should use tokei directly.","title":"CLI"},{"location":"cli/#command-line-interface","text":"pytokei can be used from the console (at least for a subset of the options that tokei offers). The CLI is built using typer and rich , so it should be self explanatory: Only the compact report has been implemented: With options to sort by the different variables, and ignore paths: For the full detailed CLI you should use tokei directly.","title":"Command Line Interface"},{"location":"usage/","text":"Overview \u00b6 This section guides you through the functionality available by inspecting some examples. Lets start by importing the library, and grab the statistics on this repo: >>> import pytokei >>> langs = pytokei . Languages () >>> conf = pytokei . Config () >>> langs . get_statistics ([ \".\" ], [ \"ignored\" ], conf ) At this point, the data is processed and stored internally, so lets explore it. What languages were detected? If you have rich installed, the console outputs will be much nicer! >>> from rich import print >>> langs . language_names () [ 'Autoconf' , 'Dockerfile' , 'Makefile' , 'Markdown' , 'Python' , 'Rust' , 'Plain Text' , 'TOML' , 'YAML' ] Lets get a small subset of the project, ignoring some of the folders: >>> from pytokei import Languages () >>> langs_short = Languages () >>> langs_short . get_statistics ([ \".\" ], [ \"docs\" , \"tests\" , \"requirements\" ], conf ) >>> langs_short . language_names () [ 'Makefile' , 'Markdown' , 'Python' , 'Rust' , 'TOML' , 'YAML' ] Now we can see what the default output of tokei would contain, directly as a python dict . The following function shows the report by language compacted, using python builtin objects: >>> print ( langs_short . report_compact_plain ()) { 'Markdown' : { 'lines' : 46 , 'files' : 1 , 'blanks' : 21 , 'comments' : 25 , 'code' : 0 }, 'Rust' : { 'code' : 317 , 'lines' : 363 , 'files' : 7 , 'blanks' : 23 , 'comments' : 23 }, 'Makefile' : { 'lines' : 26 , 'comments' : 0 , 'files' : 1 , 'blanks' : 8 , 'code' : 18 }, 'TOML' : { 'code' : 14 , 'lines' : 20 , 'comments' : 2 , 'blanks' : 4 , 'files' : 2 }, 'YAML' : { 'code' : 63 , 'lines' : 69 , 'files' : 1 , 'comments' : 0 , 'blanks' : 6 }, 'Python' : { 'comments' : 0 , 'files' : 1 , 'lines' : 21 , 'blanks' : 1 , 'code' : 20 } } Accessing the internal info \u00b6 After calling get_statistics the content is stored internally. We can see what languages are stored internally by calling get_languages : >>> print ( langs_short . get_languages ()) { LanguageType ( Markdown ): Language ( empty : false ), LanguageType ( Rust ): Language ( empty : false ), LanguageType ( Toml ): Language ( empty : false ), LanguageType ( Makefile ): Language ( empty : false ), LanguageType ( Yaml ): Language ( empty : false ), LanguageType ( Python ): Language ( empty : false ) } Some methods have an equivalent method wich ends in _plain , which will return the content in builtin python objects instead of the wrapped classes. Lets see the case of get_languages_plain : >>> print ( langs_short . get_languages_plain ()) { 'TOML' : [{ './pyproject.toml' : { 'blanks' : 4 , 'comments' : 0 , 'code' : 30 , 'lines' : 34 }}, { './Cargo.toml' : { 'code' : 14 , 'lines' : 20 , 'comments' : 2 , 'blanks' : 4 }}], 'YAML' : [{ './mkdocs.yml' : { 'blanks' : 6 , 'lines' : 69 , 'code' : 63 , 'comments' : 0 }}], 'Python' : [{ './pytokei/__init__.py' : { 'comments' : 0 , 'code' : 20 , 'blanks' : 1 , 'lines' : 21 }}], 'Makefile' : [{ './Makefile' : { 'comments' : 0 , 'lines' : 26 , 'code' : 18 , 'blanks' : 8 }}], 'Rust' : [ { './src/lib.rs' : { 'blanks' : 3 , 'comments' : 1 , 'lines' : 29 , 'code' : 25 }}, { './src/pyconfig.rs' : { 'blanks' : 12 , 'lines' : 67 , 'code' : 52 , 'comments' : 3 }}, { './src/pysort.rs' : { 'code' : 40 , 'lines' : 46 , 'comments' : 0 , 'blanks' : 6 }}, { './src/pylanguage.rs' : { 'blanks' : 22 , 'lines' : 129 , 'comments' : 2 , 'code' : 105 }}, { './src/pystats.rs' : { 'blanks' : 18 , 'lines' : 151 , 'code' : 130 , 'comments' : 3 }}, { './src/pylanguages.rs' : { 'lines' : 147 , 'comments' : 4 , 'code' : 124 , 'blanks' : 19 }}, { './src/pylanguage_type.rs' : { 'comments' : 23 , 'code' : 317 , 'lines' : 363 , 'blanks' : 23 }} ], 'Markdown' : [{ './README.md' : { 'blanks' : 21 , 'comments' : 25 , 'code' : 0 , 'lines' : 46 }}] } By calling the previous method we get the reports associated to each file by language type . Accessing a single language \u00b6 A Languages instance can be accessed by passing a LanguageType already parsed: >>> from pytokei import LanguageType >>> rust = langs [ LanguageType ( \"Rust\" )] Accessing the reports we can see what files are written in Rust : >>> print ( rust . reports_plain ()) [ { './src/lib.rs' : { 'comments' : 1 , 'blanks' : 3 , 'code' : 25 , 'lines' : 29 }}, { './src/pysort.rs' : { 'blanks' : 6 , 'code' : 40 , 'comments' : 0 , 'lines' : 46 }}, { './src/pylanguage.rs' : { 'comments' : 2 , 'lines' : 129 , 'blanks' : 22 , 'code' : 105 }}, { './src/pyconfig.rs' : { 'code' : 52 , 'lines' : 67 , 'blanks' : 12 , 'comments' : 3 }}, { './tests/data/rust.rs' : { 'comments' : 2 , 'code' : 33 , 'lines' : 39 , 'blanks' : 4 }}, { './src/pylanguages.rs' : { 'code' : 124 , 'lines' : 147 , 'blanks' : 19 , 'comments' : 4 }}, { './src/pystats.rs' : { 'lines' : 151 , 'blanks' : 18 , 'code' : 130 , 'comments' : 3 }}, { './src/pylanguage_type.rs' : { 'comments' : 23 , 'code' : 317 , 'lines' : 363 , 'blanks' : 23 }} ] Blobs of nested code \u00b6 Sometimes nested languages can be found in a given file. If that is the case, it can be accessed in the children methods: >>> rust . children_plain () { 'Markdown' : [{ './tests/data/rust.rs' : { 'lines' : 3 , 'code' : 0 , 'comments' : 3 , 'blanks' : 0 }}]} In this case, there are docstrings inside a rust file: >>> rust . reports [ 4 ] . stats . blobs { LanguageType ( Markdown ): CodeStats ( blanks : 0 , code : 0 , comments : 3 , lines : 3 )} Sorting \u00b6 The reports of a given file can be sorted by one of the methods available: >>> pytokei . sort_types () [ 'Blanks' , 'Comments' , 'Code' , 'Files' , 'Lines' ] Before and after sorting the files by the number of lines: >>> print ( rust . reports ) [ Report ( \"./src/lib.rs\" ), Report ( \"./src/pysort.rs\" ), Report ( \"./src/pylanguage.rs\" ), Report ( \"./src/pyconfig.rs\" ), Report ( \"./tests/data/rust.rs\" ), Report ( \"./src/pylanguages.rs\" ), Report ( \"./src/pystats.rs\" ), Report ( \"./src/pylanguage_type.rs\" ) ] >>> rust . sort_by ( pytokei . Sort ( \"lines\" )) >>> print ( rust . reports ) [ Report ( \"./src/pylanguage_type.rs\" ), Report ( \"./src/pystats.rs\" ), Report ( \"./src/pylanguages.rs\" ), Report ( \"./src/pylanguage.rs\" ), Report ( \"./src/pyconfig.rs\" ), Report ( \"./src/pysort.rs\" ), Report ( \"./tests/data/rust.rs\" ), Report ( \"./src/lib.rs\" ) ] Summary of a report \u00b6 To see the sum of all the files found, the languages can be totaled up: >>> langs . total_plain () { 'code' : 1291 , 'lines' : 1857 , 'files' : 34 , 'comments' : 273 , 'blanks' : 293 } To see all the functionalities exposed, please visit the API docs.","title":"Usage"},{"location":"usage/#overview","text":"This section guides you through the functionality available by inspecting some examples. Lets start by importing the library, and grab the statistics on this repo: >>> import pytokei >>> langs = pytokei . Languages () >>> conf = pytokei . Config () >>> langs . get_statistics ([ \".\" ], [ \"ignored\" ], conf ) At this point, the data is processed and stored internally, so lets explore it. What languages were detected? If you have rich installed, the console outputs will be much nicer! >>> from rich import print >>> langs . language_names () [ 'Autoconf' , 'Dockerfile' , 'Makefile' , 'Markdown' , 'Python' , 'Rust' , 'Plain Text' , 'TOML' , 'YAML' ] Lets get a small subset of the project, ignoring some of the folders: >>> from pytokei import Languages () >>> langs_short = Languages () >>> langs_short . get_statistics ([ \".\" ], [ \"docs\" , \"tests\" , \"requirements\" ], conf ) >>> langs_short . language_names () [ 'Makefile' , 'Markdown' , 'Python' , 'Rust' , 'TOML' , 'YAML' ] Now we can see what the default output of tokei would contain, directly as a python dict . The following function shows the report by language compacted, using python builtin objects: >>> print ( langs_short . report_compact_plain ()) { 'Markdown' : { 'lines' : 46 , 'files' : 1 , 'blanks' : 21 , 'comments' : 25 , 'code' : 0 }, 'Rust' : { 'code' : 317 , 'lines' : 363 , 'files' : 7 , 'blanks' : 23 , 'comments' : 23 }, 'Makefile' : { 'lines' : 26 , 'comments' : 0 , 'files' : 1 , 'blanks' : 8 , 'code' : 18 }, 'TOML' : { 'code' : 14 , 'lines' : 20 , 'comments' : 2 , 'blanks' : 4 , 'files' : 2 }, 'YAML' : { 'code' : 63 , 'lines' : 69 , 'files' : 1 , 'comments' : 0 , 'blanks' : 6 }, 'Python' : { 'comments' : 0 , 'files' : 1 , 'lines' : 21 , 'blanks' : 1 , 'code' : 20 } }","title":"Overview"},{"location":"usage/#accessing-the-internal-info","text":"After calling get_statistics the content is stored internally. We can see what languages are stored internally by calling get_languages : >>> print ( langs_short . get_languages ()) { LanguageType ( Markdown ): Language ( empty : false ), LanguageType ( Rust ): Language ( empty : false ), LanguageType ( Toml ): Language ( empty : false ), LanguageType ( Makefile ): Language ( empty : false ), LanguageType ( Yaml ): Language ( empty : false ), LanguageType ( Python ): Language ( empty : false ) } Some methods have an equivalent method wich ends in _plain , which will return the content in builtin python objects instead of the wrapped classes. Lets see the case of get_languages_plain : >>> print ( langs_short . get_languages_plain ()) { 'TOML' : [{ './pyproject.toml' : { 'blanks' : 4 , 'comments' : 0 , 'code' : 30 , 'lines' : 34 }}, { './Cargo.toml' : { 'code' : 14 , 'lines' : 20 , 'comments' : 2 , 'blanks' : 4 }}], 'YAML' : [{ './mkdocs.yml' : { 'blanks' : 6 , 'lines' : 69 , 'code' : 63 , 'comments' : 0 }}], 'Python' : [{ './pytokei/__init__.py' : { 'comments' : 0 , 'code' : 20 , 'blanks' : 1 , 'lines' : 21 }}], 'Makefile' : [{ './Makefile' : { 'comments' : 0 , 'lines' : 26 , 'code' : 18 , 'blanks' : 8 }}], 'Rust' : [ { './src/lib.rs' : { 'blanks' : 3 , 'comments' : 1 , 'lines' : 29 , 'code' : 25 }}, { './src/pyconfig.rs' : { 'blanks' : 12 , 'lines' : 67 , 'code' : 52 , 'comments' : 3 }}, { './src/pysort.rs' : { 'code' : 40 , 'lines' : 46 , 'comments' : 0 , 'blanks' : 6 }}, { './src/pylanguage.rs' : { 'blanks' : 22 , 'lines' : 129 , 'comments' : 2 , 'code' : 105 }}, { './src/pystats.rs' : { 'blanks' : 18 , 'lines' : 151 , 'code' : 130 , 'comments' : 3 }}, { './src/pylanguages.rs' : { 'lines' : 147 , 'comments' : 4 , 'code' : 124 , 'blanks' : 19 }}, { './src/pylanguage_type.rs' : { 'comments' : 23 , 'code' : 317 , 'lines' : 363 , 'blanks' : 23 }} ], 'Markdown' : [{ './README.md' : { 'blanks' : 21 , 'comments' : 25 , 'code' : 0 , 'lines' : 46 }}] } By calling the previous method we get the reports associated to each file by language type .","title":"Accessing the internal info"},{"location":"usage/#accessing-a-single-language","text":"A Languages instance can be accessed by passing a LanguageType already parsed: >>> from pytokei import LanguageType >>> rust = langs [ LanguageType ( \"Rust\" )] Accessing the reports we can see what files are written in Rust : >>> print ( rust . reports_plain ()) [ { './src/lib.rs' : { 'comments' : 1 , 'blanks' : 3 , 'code' : 25 , 'lines' : 29 }}, { './src/pysort.rs' : { 'blanks' : 6 , 'code' : 40 , 'comments' : 0 , 'lines' : 46 }}, { './src/pylanguage.rs' : { 'comments' : 2 , 'lines' : 129 , 'blanks' : 22 , 'code' : 105 }}, { './src/pyconfig.rs' : { 'code' : 52 , 'lines' : 67 , 'blanks' : 12 , 'comments' : 3 }}, { './tests/data/rust.rs' : { 'comments' : 2 , 'code' : 33 , 'lines' : 39 , 'blanks' : 4 }}, { './src/pylanguages.rs' : { 'code' : 124 , 'lines' : 147 , 'blanks' : 19 , 'comments' : 4 }}, { './src/pystats.rs' : { 'lines' : 151 , 'blanks' : 18 , 'code' : 130 , 'comments' : 3 }}, { './src/pylanguage_type.rs' : { 'comments' : 23 , 'code' : 317 , 'lines' : 363 , 'blanks' : 23 }} ]","title":"Accessing a single language"},{"location":"usage/#blobs-of-nested-code","text":"Sometimes nested languages can be found in a given file. If that is the case, it can be accessed in the children methods: >>> rust . children_plain () { 'Markdown' : [{ './tests/data/rust.rs' : { 'lines' : 3 , 'code' : 0 , 'comments' : 3 , 'blanks' : 0 }}]} In this case, there are docstrings inside a rust file: >>> rust . reports [ 4 ] . stats . blobs { LanguageType ( Markdown ): CodeStats ( blanks : 0 , code : 0 , comments : 3 , lines : 3 )}","title":"Blobs of nested code"},{"location":"usage/#sorting","text":"The reports of a given file can be sorted by one of the methods available: >>> pytokei . sort_types () [ 'Blanks' , 'Comments' , 'Code' , 'Files' , 'Lines' ] Before and after sorting the files by the number of lines: >>> print ( rust . reports ) [ Report ( \"./src/lib.rs\" ), Report ( \"./src/pysort.rs\" ), Report ( \"./src/pylanguage.rs\" ), Report ( \"./src/pyconfig.rs\" ), Report ( \"./tests/data/rust.rs\" ), Report ( \"./src/pylanguages.rs\" ), Report ( \"./src/pystats.rs\" ), Report ( \"./src/pylanguage_type.rs\" ) ] >>> rust . sort_by ( pytokei . Sort ( \"lines\" )) >>> print ( rust . reports ) [ Report ( \"./src/pylanguage_type.rs\" ), Report ( \"./src/pystats.rs\" ), Report ( \"./src/pylanguages.rs\" ), Report ( \"./src/pylanguage.rs\" ), Report ( \"./src/pyconfig.rs\" ), Report ( \"./src/pysort.rs\" ), Report ( \"./tests/data/rust.rs\" ), Report ( \"./src/lib.rs\" ) ]","title":"Sorting"},{"location":"usage/#summary-of-a-report","text":"To see the sum of all the files found, the languages can be totaled up: >>> langs . total_plain () { 'code' : 1291 , 'lines' : 1857 , 'files' : 34 , 'comments' : 273 , 'blanks' : 293 } To see all the functionalities exposed, please visit the API docs.","title":"Summary of a report"},{"location":"api/config/","text":"This section contains the reference for the implementation of tokei's Config struct. Config \u00b6 Config () -> None A configuration struct for how Languages.get_statistics searches and counts languages. References \u00b6 tokei reference Examples \u00b6 >>> conf = pytokei . Config () >>> conf Config () columns property \u00b6 columns () -> int Width of columns to be printed to the terminal. This option is ignored in the library. Default: Auto detected width of the terminal . tokei reference . from_config_files staticmethod \u00b6 from_config_files () -> Config Creates a Config from three configuration files if they are available. tokei reference . hidden property \u00b6 hidden () -> bool Count hidden files and directories. Default: false . tokei reference . no_ignore property \u00b6 no_ignore () -> bool Don't respect ignore files (.gitignore, .ignore, etc.). tokei reference . no_ignore_dot property \u00b6 no_ignore_dot () -> bool Don't respect .ignore and .tokeignore files, including those in parent directories. Default: false . tokei reference . no_ignore_parent property \u00b6 no_ignore_parent () -> bool Don't respect ignore files (.gitignore, .ignore, etc.) in parent directories. Default: false . tokei reference . no_ignore_vcs property \u00b6 no_ignore_vcs () -> bool Don't respect VCS ignore files (.gitignore, .hgignore, etc.), including those in parent directories. Default: false . tokei reference . treat_doc_strings_as_comments property \u00b6 treat_doc_strings_as_comments () -> bool Whether to treat doc strings in languages as comments. Default: false . tokei reference .","title":"Config"},{"location":"api/config/#pytokei._pytokei.Config","text":"Config () -> None A configuration struct for how Languages.get_statistics searches and counts languages.","title":"Config"},{"location":"api/config/#pytokei._pytokei.Config--references","text":"tokei reference","title":"References"},{"location":"api/config/#pytokei._pytokei.Config--examples","text":">>> conf = pytokei . Config () >>> conf Config ()","title":"Examples"},{"location":"api/config/#pytokei._pytokei.Config.columns","text":"columns () -> int Width of columns to be printed to the terminal. This option is ignored in the library. Default: Auto detected width of the terminal . tokei reference .","title":"columns()"},{"location":"api/config/#pytokei._pytokei.Config.from_config_files","text":"from_config_files () -> Config Creates a Config from three configuration files if they are available. tokei reference .","title":"from_config_files()"},{"location":"api/config/#pytokei._pytokei.Config.hidden","text":"hidden () -> bool Count hidden files and directories. Default: false . tokei reference .","title":"hidden()"},{"location":"api/config/#pytokei._pytokei.Config.no_ignore","text":"no_ignore () -> bool Don't respect ignore files (.gitignore, .ignore, etc.). tokei reference .","title":"no_ignore()"},{"location":"api/config/#pytokei._pytokei.Config.no_ignore_dot","text":"no_ignore_dot () -> bool Don't respect .ignore and .tokeignore files, including those in parent directories. Default: false . tokei reference .","title":"no_ignore_dot()"},{"location":"api/config/#pytokei._pytokei.Config.no_ignore_parent","text":"no_ignore_parent () -> bool Don't respect ignore files (.gitignore, .ignore, etc.) in parent directories. Default: false . tokei reference .","title":"no_ignore_parent()"},{"location":"api/config/#pytokei._pytokei.Config.no_ignore_vcs","text":"no_ignore_vcs () -> bool Don't respect VCS ignore files (.gitignore, .hgignore, etc.), including those in parent directories. Default: false . tokei reference .","title":"no_ignore_vcs()"},{"location":"api/config/#pytokei._pytokei.Config.treat_doc_strings_as_comments","text":"treat_doc_strings_as_comments () -> bool Whether to treat doc strings in languages as comments. Default: false . tokei reference .","title":"treat_doc_strings_as_comments()"},{"location":"api/language/","text":"This section contains the reference for the implementation of tokei's Language struct. Language \u00b6 Language () -> None A struct representing statistics about a single Language. References \u00b6 tokei reference Examples \u00b6 >>> import pytokei >>> lang = pytokei . Language () >>> lang Language ( empty : true ) Note mark_inaccurate is not defined, this may be better done from the rust side. add_report \u00b6 add_report ( report : Report ) -> int Add a Report to the Language. This will not update the totals in the Language class. blanks property \u00b6 blanks () -> int The total number of blank lines. tokei reference . children property \u00b6 children () -> dict [ LanguageType , list [ Report ]] A map of any languages found in the reports. tokei reference . children_plain \u00b6 children_plain () -> dict [ str , list [ dict [ str , dict [ str , int ]]]] The equivalent version of reports_plain method, but with children. code property \u00b6 code () -> int The total number of lines of code. tokei reference . comments property \u00b6 comments () -> int The total number of comments(both single, and multi-line). tokei reference . files \u00b6 files () -> int Counts the number of reports. innacurate property \u00b6 innacurate () -> bool Whether this language had problems with file parsing. tokei reference . is_empty \u00b6 is_empty () -> bool Checks if the language is empty. Empty meaning it doesn't have any statistics. lines \u00b6 lines () -> int Returns the total number of lines. reports property \u00b6 reports () -> list [ Report ] A collection of statistics of individual files. tokei reference . reports_plain \u00b6 reports_plain () -> list [ dict [ str , dict [ str , int ]]] A version of reports method but in plain python objects. Instead of a list with reports, it returns a list with dicts containing as key the name of the file and a dict with each one of the reports's objects. sort_by \u00b6 sort_by ( category : Sort ) -> None Sorts each of the Report s contained in the language based on what category is provided. summarise \u00b6 summarise () -> Language Creates a new Language from self , which is a summarised version of the language that doesn't contain any children. It will count non-blank lines in child languages as code unless the child language is considered \"literate\" then it will be counted as comments. total \u00b6 total () -> None Totals up the statistics of the Stat class currently contained in the language.","title":"Language"},{"location":"api/language/#pytokei._pytokei.Language","text":"Language () -> None A struct representing statistics about a single Language.","title":"Language"},{"location":"api/language/#pytokei._pytokei.Language--references","text":"tokei reference","title":"References"},{"location":"api/language/#pytokei._pytokei.Language--examples","text":">>> import pytokei >>> lang = pytokei . Language () >>> lang Language ( empty : true ) Note mark_inaccurate is not defined, this may be better done from the rust side.","title":"Examples"},{"location":"api/language/#pytokei._pytokei.Language.add_report","text":"add_report ( report : Report ) -> int Add a Report to the Language. This will not update the totals in the Language class.","title":"add_report()"},{"location":"api/language/#pytokei._pytokei.Language.blanks","text":"blanks () -> int The total number of blank lines. tokei reference .","title":"blanks()"},{"location":"api/language/#pytokei._pytokei.Language.children","text":"children () -> dict [ LanguageType , list [ Report ]] A map of any languages found in the reports. tokei reference .","title":"children()"},{"location":"api/language/#pytokei._pytokei.Language.children_plain","text":"children_plain () -> dict [ str , list [ dict [ str , dict [ str , int ]]]] The equivalent version of reports_plain method, but with children.","title":"children_plain()"},{"location":"api/language/#pytokei._pytokei.Language.code","text":"code () -> int The total number of lines of code. tokei reference .","title":"code()"},{"location":"api/language/#pytokei._pytokei.Language.comments","text":"comments () -> int The total number of comments(both single, and multi-line). tokei reference .","title":"comments()"},{"location":"api/language/#pytokei._pytokei.Language.files","text":"files () -> int Counts the number of reports.","title":"files()"},{"location":"api/language/#pytokei._pytokei.Language.innacurate","text":"innacurate () -> bool Whether this language had problems with file parsing. tokei reference .","title":"innacurate()"},{"location":"api/language/#pytokei._pytokei.Language.is_empty","text":"is_empty () -> bool Checks if the language is empty. Empty meaning it doesn't have any statistics.","title":"is_empty()"},{"location":"api/language/#pytokei._pytokei.Language.lines","text":"lines () -> int Returns the total number of lines.","title":"lines()"},{"location":"api/language/#pytokei._pytokei.Language.reports","text":"reports () -> list [ Report ] A collection of statistics of individual files. tokei reference .","title":"reports()"},{"location":"api/language/#pytokei._pytokei.Language.reports_plain","text":"reports_plain () -> list [ dict [ str , dict [ str , int ]]] A version of reports method but in plain python objects. Instead of a list with reports, it returns a list with dicts containing as key the name of the file and a dict with each one of the reports's objects.","title":"reports_plain()"},{"location":"api/language/#pytokei._pytokei.Language.sort_by","text":"sort_by ( category : Sort ) -> None Sorts each of the Report s contained in the language based on what category is provided.","title":"sort_by()"},{"location":"api/language/#pytokei._pytokei.Language.summarise","text":"summarise () -> Language Creates a new Language from self , which is a summarised version of the language that doesn't contain any children. It will count non-blank lines in child languages as code unless the child language is considered \"literate\" then it will be counted as comments.","title":"summarise()"},{"location":"api/language/#pytokei._pytokei.Language.total","text":"total () -> None Totals up the statistics of the Stat class currently contained in the language.","title":"total()"},{"location":"api/language_type/","text":"This section contains the reference for the implementation of tokei's LanguageType struct. LanguageType \u00b6 LanguageType () -> None Represents a individual programming language. Can be used to provide information about the language, such as multi line comments, single line comments, string literal syntax, whether a given language allows nesting comments. Note This is defined as a struct in rust. There may be a better way of representing this object in python, but for the moment its a class which has the corresponding LanguageType represented underneath. Warning The following methods aren't currently implemented: from_path , from_file_extension , from_mime , from_shebang , parse , parse_from_str , parse_from_slice . Examples \u00b6 >>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python LanguageType ( Python ) To see the languages defined, run the following: >>> LanguageType . list () [ 'ABNF' , 'ABAP' , 'ActionScript' , 'Ada' , ... References \u00b6 tokei reference . The implementation of the different methods are here: ref allows_nested \u00b6 allows_nested () -> bool Returns whether the language allows nested multi line comments. doc_quotes \u00b6 doc_quotes () -> list [ tuple [ str ]] Returns the doc quotes of a language. Examples \u00b6 >>> LanguageType ( \"Python\" ) . doc_quotes () [( ', ' ), ( \"'''\" , \"'''\" )] important_syntax \u00b6 important_syntax () -> list [ str ] Returns the parts of syntax that determines whether tokei can skip large parts of analysis. is_literate \u00b6 is_literate () -> bool Returns whether the language is \"literate\", meaning that it considered to primarily be documentation and is counted primarily as comments rather than procedural code. line_comments \u00b6 line_comments () -> list [ str ] Returns the single line comments of a language. Examples \u00b6 >>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python . line_comments () [ '#' ] multi_line_comments \u00b6 multi_line_comments () -> list [ Optional [ tuple [ str ]]] Returns the multi line comments of a language (if they have it). Examples \u00b6 >>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python . multi_line_comments () [] >>> rust = LanguageType ( \"Rust\" ) >>> rust . multi_line_comments () [( '/*' , '*/' )] name \u00b6 name () -> str Returns the display name of a language. nested_comments \u00b6 nested_comments () -> list [ tuple [ str ]] Returns what nested comments the language has. (Currently only D has any of this type.) Examples \u00b6 >>> d = LanguageType ( \"D\" ) >>> d . nested_comments () [( '/+' , '+/' )] quotes \u00b6 quotes () -> list [ tuple [ str ]] Returns the quotes of a language. Examples \u00b6 >>> d = LanguageType ( \"C\" ) >>> d . quotes () [( '\"' , '\"' )] shebangs \u00b6 shebangs () -> list [ str ] Returns the shebang of a language. Examples \u00b6 >>> LanguageType ( \"BASH\" ) . shebangs () [ '#!/bin/bash' ] verbatim_quotes \u00b6 verbatim_quotes () -> list [ tuple [ str ]] Returns the verbatim quotes of a language. Examples \u00b6 >>> LanguageType ( \"C#\" ) . verbatim_quotes () [( '@\"' , '\"' )]","title":"Language type"},{"location":"api/language_type/#pytokei._pytokei.LanguageType","text":"LanguageType () -> None Represents a individual programming language. Can be used to provide information about the language, such as multi line comments, single line comments, string literal syntax, whether a given language allows nesting comments. Note This is defined as a struct in rust. There may be a better way of representing this object in python, but for the moment its a class which has the corresponding LanguageType represented underneath. Warning The following methods aren't currently implemented: from_path , from_file_extension , from_mime , from_shebang , parse , parse_from_str , parse_from_slice .","title":"LanguageType"},{"location":"api/language_type/#pytokei._pytokei.LanguageType--examples","text":">>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python LanguageType ( Python ) To see the languages defined, run the following: >>> LanguageType . list () [ 'ABNF' , 'ABAP' , 'ActionScript' , 'Ada' , ...","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType--references","text":"tokei reference . The implementation of the different methods are here: ref","title":"References"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.allows_nested","text":"allows_nested () -> bool Returns whether the language allows nested multi line comments.","title":"allows_nested()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.doc_quotes","text":"doc_quotes () -> list [ tuple [ str ]] Returns the doc quotes of a language.","title":"doc_quotes()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.doc_quotes--examples","text":">>> LanguageType ( \"Python\" ) . doc_quotes () [( ', ' ), ( \"'''\" , \"'''\" )]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.important_syntax","text":"important_syntax () -> list [ str ] Returns the parts of syntax that determines whether tokei can skip large parts of analysis.","title":"important_syntax()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.is_literate","text":"is_literate () -> bool Returns whether the language is \"literate\", meaning that it considered to primarily be documentation and is counted primarily as comments rather than procedural code.","title":"is_literate()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.line_comments","text":"line_comments () -> list [ str ] Returns the single line comments of a language.","title":"line_comments()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.line_comments--examples","text":">>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python . line_comments () [ '#' ]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.multi_line_comments","text":"multi_line_comments () -> list [ Optional [ tuple [ str ]]] Returns the multi line comments of a language (if they have it).","title":"multi_line_comments()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.multi_line_comments--examples","text":">>> from pytokei import LanguageType >>> python = LanguageType ( \"Python\" ) >>> python . multi_line_comments () [] >>> rust = LanguageType ( \"Rust\" ) >>> rust . multi_line_comments () [( '/*' , '*/' )]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.name","text":"name () -> str Returns the display name of a language.","title":"name()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.nested_comments","text":"nested_comments () -> list [ tuple [ str ]] Returns what nested comments the language has. (Currently only D has any of this type.)","title":"nested_comments()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.nested_comments--examples","text":">>> d = LanguageType ( \"D\" ) >>> d . nested_comments () [( '/+' , '+/' )]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.quotes","text":"quotes () -> list [ tuple [ str ]] Returns the quotes of a language.","title":"quotes()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.quotes--examples","text":">>> d = LanguageType ( \"C\" ) >>> d . quotes () [( '\"' , '\"' )]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.shebangs","text":"shebangs () -> list [ str ] Returns the shebang of a language.","title":"shebangs()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.shebangs--examples","text":">>> LanguageType ( \"BASH\" ) . shebangs () [ '#!/bin/bash' ]","title":"Examples"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.verbatim_quotes","text":"verbatim_quotes () -> list [ tuple [ str ]] Returns the verbatim quotes of a language.","title":"verbatim_quotes()"},{"location":"api/language_type/#pytokei._pytokei.LanguageType.verbatim_quotes--examples","text":">>> LanguageType ( \"C#\" ) . verbatim_quotes () [( '@\"' , '\"' )]","title":"Examples"},{"location":"api/languages/","text":"This section contains the reference for the implementation of tokei's Languages struct. Languages \u00b6 Languages () -> None A class representing a list of languages counted in the provided directory. See LanguageType.list Examples \u00b6 ```python >>> from pytokei import Languages >>> langs = Languages() >>> langs Languages() ``` References \u00b6 Languages implementation __getitem__ \u00b6 __getitem__ ( lang_type : LanguageType ) -> Language | ValueError Implements the same functionality as in tokei to access the contents of a given languages object by a key. Corresponds to let rust = &languages[&LanguageType::Rust]; in python files \u00b6 files () -> dict [ str , int ] Total number of files in the value, corresponding to the language name key. get_languages \u00b6 get_languages () -> dict [ LanguageType , Language ] Exposes the inner struct from rust to the classes defined in python. get_languages_plain \u00b6 get_languages_plain () -> dict [ str , list [ dict [ str , dict [ str , int ]]]] The same method as get_languages but in python builtin objects. get_statistics \u00b6 get_statistics ( paths : list [ str ], ignored : list [ str ], config : Config ) -> None Populates the Languages struct with statistics about languages provided by Language. Takes a list of of paths (as str) to recursively traverse, paths can be relative, absolute or glob paths. A second list of paths (as str) to ignore, these strings use the .gitignore syntax, such as target or **/*.bk . Parameters \u00b6 paths : list[str] List of files to traverse. It may be a single directory. ignored : list[str] List of files to ignore. If you don't want anything ignored, just pass `[\"ignored\"]`. config : Config Config instance. If you dont have any preferences, just pass `Config`. language_names \u00b6 language_names () -> Optional [ list [ str ]] Returns the list of language names, if any was found. report_compact_plain \u00b6 report_compact_plain () -> dict [ str , dict [ str , int ]] Returns the information as the default command from tokei. Computes the statistics per language. total \u00b6 total () -> Language Summary of the Languages struct. total_plain \u00b6 total_plain () -> dict [ str , int ] Returns the content of total as a dict.","title":"Languages"},{"location":"api/languages/#pytokei._pytokei.Languages","text":"Languages () -> None A class representing a list of languages counted in the provided directory. See LanguageType.list","title":"Languages"},{"location":"api/languages/#pytokei._pytokei.Languages--examples","text":"```python >>> from pytokei import Languages >>> langs = Languages() >>> langs Languages() ```","title":"Examples"},{"location":"api/languages/#pytokei._pytokei.Languages--references","text":"Languages implementation","title":"References"},{"location":"api/languages/#pytokei._pytokei.Languages.__getitem__","text":"__getitem__ ( lang_type : LanguageType ) -> Language | ValueError Implements the same functionality as in tokei to access the contents of a given languages object by a key. Corresponds to let rust = &languages[&LanguageType::Rust]; in python","title":"__getitem__()"},{"location":"api/languages/#pytokei._pytokei.Languages.files","text":"files () -> dict [ str , int ] Total number of files in the value, corresponding to the language name key.","title":"files()"},{"location":"api/languages/#pytokei._pytokei.Languages.get_languages","text":"get_languages () -> dict [ LanguageType , Language ] Exposes the inner struct from rust to the classes defined in python.","title":"get_languages()"},{"location":"api/languages/#pytokei._pytokei.Languages.get_languages_plain","text":"get_languages_plain () -> dict [ str , list [ dict [ str , dict [ str , int ]]]] The same method as get_languages but in python builtin objects.","title":"get_languages_plain()"},{"location":"api/languages/#pytokei._pytokei.Languages.get_statistics","text":"get_statistics ( paths : list [ str ], ignored : list [ str ], config : Config ) -> None Populates the Languages struct with statistics about languages provided by Language. Takes a list of of paths (as str) to recursively traverse, paths can be relative, absolute or glob paths. A second list of paths (as str) to ignore, these strings use the .gitignore syntax, such as target or **/*.bk .","title":"get_statistics()"},{"location":"api/languages/#pytokei._pytokei.Languages.get_statistics--parameters","text":"paths : list[str] List of files to traverse. It may be a single directory. ignored : list[str] List of files to ignore. If you don't want anything ignored, just pass `[\"ignored\"]`. config : Config Config instance. If you dont have any preferences, just pass `Config`.","title":"Parameters"},{"location":"api/languages/#pytokei._pytokei.Languages.language_names","text":"language_names () -> Optional [ list [ str ]] Returns the list of language names, if any was found.","title":"language_names()"},{"location":"api/languages/#pytokei._pytokei.Languages.report_compact_plain","text":"report_compact_plain () -> dict [ str , dict [ str , int ]] Returns the information as the default command from tokei. Computes the statistics per language.","title":"report_compact_plain()"},{"location":"api/languages/#pytokei._pytokei.Languages.total","text":"total () -> Language Summary of the Languages struct.","title":"total()"},{"location":"api/languages/#pytokei._pytokei.Languages.total_plain","text":"total_plain () -> dict [ str , int ] Returns the content of total as a dict.","title":"total_plain()"},{"location":"api/sort/","text":"Sort \u00b6 Sort () -> None Used for sorting languages. Examples \u00b6 >>> from pytokei import Sort >>> sort_method = Sort ( \"Lines\" ) >>> sort_method Sort ( Lines ) References \u00b6 tokei reference from_str staticmethod \u00b6 from_str ( s : str ) -> Sort | ValueError Another instantiation method from the name of the method. Examples \u00b6 >>> from pytokei import Sort >>> sort_method = pytokei . Sort . from_str ( \"lines\" ) >>> sort_method Sort ( Lines ) sort = pytokei.Sort.from_str(\"lines\") sort_types \u00b6 sort_types () -> list [ str ] Helper function to obtain each variant of the Sort enum as a str. Examples \u00b6 >>> from pytokei import sort_types >>> sort_types () [ 'Blanks' , 'Comments' , 'Code' , 'Files' , 'Lines' ]","title":"Sort"},{"location":"api/sort/#pytokei._pytokei.Sort","text":"Sort () -> None Used for sorting languages.","title":"Sort"},{"location":"api/sort/#pytokei._pytokei.Sort--examples","text":">>> from pytokei import Sort >>> sort_method = Sort ( \"Lines\" ) >>> sort_method Sort ( Lines )","title":"Examples"},{"location":"api/sort/#pytokei._pytokei.Sort--references","text":"tokei reference","title":"References"},{"location":"api/sort/#pytokei._pytokei.Sort.from_str","text":"from_str ( s : str ) -> Sort | ValueError Another instantiation method from the name of the method.","title":"from_str()"},{"location":"api/sort/#pytokei._pytokei.Sort.from_str--examples","text":">>> from pytokei import Sort >>> sort_method = pytokei . Sort . from_str ( \"lines\" ) >>> sort_method Sort ( Lines ) sort = pytokei.Sort.from_str(\"lines\")","title":"Examples"},{"location":"api/sort/#pytokei._pytokei.sort_types","text":"sort_types () -> list [ str ] Helper function to obtain each variant of the Sort enum as a str.","title":"sort_types()"},{"location":"api/sort/#pytokei._pytokei.sort_types--examples","text":">>> from pytokei import sort_types >>> sort_types () [ 'Blanks' , 'Comments' , 'Code' , 'Files' , 'Lines' ]","title":"Examples"},{"location":"api/stats/","text":"This section contains the reference for the implementation of tokei's CodeStats and Report structs. CodeStats \u00b6 CodeStats () -> None A class representing stats about a single blob of code. tokei reference . Examples \u00b6 >>> from pytokei import CodeStats >>> CodeStats () CodeStats ( blanks : 0 , code : 0 , comments : 0 , lines : 0 ) blanks property \u00b6 blanks () -> int The blank lines in the blob. tokei reference blobs property \u00b6 blobs () -> dict [ LanguageType , CodeStats ] Language blobs that were contained inside this blob, represented in the equivalent python objects. tokei reference blobs_plain property \u00b6 blobs_plain () -> dict [ str , dict [ str , int ]] Equivalent method to blobs but in builtin python objects. code property \u00b6 code () -> int The lines of code in the blob. tokei reference comments property \u00b6 comments () -> int The lines of comments in the blob. tokei reference lines \u00b6 lines () -> int Get the total lines in a blob of code. plain \u00b6 plain () -> dict [ str , int ] Returns the content of the blob as a dict, blanks, code, comments and lines. summarise \u00b6 summarise () -> CodeStats Creates a new CodeStats from an existing one with all of the child blobs merged. Report \u00b6 Report () -> None A struct representing the statistics of a file. tokei reference . It can be constructed easily: Examples \u00b6 >>> from pytokei import Report >>> Report ( \"filename\" ) Report ( \"filename\" ) But it isn't expected to be used like this, just get it from a parsed directory. name property \u00b6 name ( str ) -> str Filename that represents. plain \u00b6 plain () -> dict [ str , dict [ str , int ]] Representation of the object in builtin python objects, where the key corresponds to the filename that generated it, and the value is the result of CodeStats.plain method. stats property \u00b6 stats ( str ) -> CodeStats The code statistics found in the file.","title":"Stats"},{"location":"api/stats/#pytokei._pytokei.CodeStats","text":"CodeStats () -> None A class representing stats about a single blob of code. tokei reference .","title":"CodeStats"},{"location":"api/stats/#pytokei._pytokei.CodeStats--examples","text":">>> from pytokei import CodeStats >>> CodeStats () CodeStats ( blanks : 0 , code : 0 , comments : 0 , lines : 0 )","title":"Examples"},{"location":"api/stats/#pytokei._pytokei.CodeStats.blanks","text":"blanks () -> int The blank lines in the blob. tokei reference","title":"blanks()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.blobs","text":"blobs () -> dict [ LanguageType , CodeStats ] Language blobs that were contained inside this blob, represented in the equivalent python objects. tokei reference","title":"blobs()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.blobs_plain","text":"blobs_plain () -> dict [ str , dict [ str , int ]] Equivalent method to blobs but in builtin python objects.","title":"blobs_plain()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.code","text":"code () -> int The lines of code in the blob. tokei reference","title":"code()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.comments","text":"comments () -> int The lines of comments in the blob. tokei reference","title":"comments()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.lines","text":"lines () -> int Get the total lines in a blob of code.","title":"lines()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.plain","text":"plain () -> dict [ str , int ] Returns the content of the blob as a dict, blanks, code, comments and lines.","title":"plain()"},{"location":"api/stats/#pytokei._pytokei.CodeStats.summarise","text":"summarise () -> CodeStats Creates a new CodeStats from an existing one with all of the child blobs merged.","title":"summarise()"},{"location":"api/stats/#pytokei._pytokei.Report","text":"Report () -> None A struct representing the statistics of a file. tokei reference . It can be constructed easily:","title":"Report"},{"location":"api/stats/#pytokei._pytokei.Report--examples","text":">>> from pytokei import Report >>> Report ( \"filename\" ) Report ( \"filename\" ) But it isn't expected to be used like this, just get it from a parsed directory.","title":"Examples"},{"location":"api/stats/#pytokei._pytokei.Report.name","text":"name ( str ) -> str Filename that represents.","title":"name()"},{"location":"api/stats/#pytokei._pytokei.Report.plain","text":"plain () -> dict [ str , dict [ str , int ]] Representation of the object in builtin python objects, where the key corresponds to the filename that generated it, and the value is the result of CodeStats.plain method.","title":"plain()"},{"location":"api/stats/#pytokei._pytokei.Report.stats","text":"stats ( str ) -> CodeStats The code statistics found in the file.","title":"stats()"}]}